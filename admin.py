# Caleb Nhkum
# CMPSC 487W
# Project 1

# Admin
# Database Section
import mysql.connector
from mysql.connector import Error
import pandas as pd

def create_server_connection(host_name, user_name, user_password, db_name):
    connection = None
    try:
        connection = mysql.connector.connect(
            host=host_name,
            user=user_name,
            passwd=user_password,
            database=db_name
        )
        print("MySQL Database connection successful")
    except Error as err:
        print(f"Error: '{err}'")

    return connection

connection = create_server_connection("localhost", "root", "21nhkumCa&", "cmpsc487")

# use the method to insert or update data in the tables 
def execute_query(connection, query):
    cursor = connection.cursor()
    try:
        cursor.execute(query)
        connection.commit()
        print("Query successful")
    except Error as err:
        print(f"Error: '{err}'")

# use it to get data from tables
def read_query(connection, query):
    cursor = connection.cursor()
    result = None
    try:
        cursor.execute(query)
        result = cursor.fetchall()
        print("Query successful")
        return result
    except Error as err:
        print(f"Error: '{err}'")

def checkAdmin(email, password):
    query = f"""
     SELECT * FROM admins
     WHERE username="{email}" AND password="{password}";
    """
    return query

def getDatabaseQuery(tableName):
    query = f"""
    SELECT * FROM {tableName};
    """
    return query

def getLogQuery():
    q = f"""
    SELECT users.name, access.ID, users.type, access.check_in, access.check_out
    FROM access LEFT JOIN users ON access.ID = users.ID; 
    """
    return q

def getLogByIdQuery(id):
    q = f"""
    SELECT users.name, access.ID, users.type, access.check_in, access.check_out
    FROM access LEFT JOIN users ON access.ID = users.ID
    WHERE access.ID = {id}; 
    """
    return q
def getLogByDateANDid(id, date):
    q = f"""
    SELECT users.name, access.ID, users.type, access.check_in, access.check_out
    FROM access LEFT JOIN users ON access.ID = users.ID
    WHERE access.ID = {id} AND CAST(access.check_in AS DATE) = '{date}';
    """
    return q
def getLogByDate(date):
    q = f"""
    SELECT users.name, access.ID, users.type, access.check_in, access.check_out
    FROM access LEFT JOIN users ON access.ID = users.ID
    WHERE CAST(access.check_in AS DATE) = '{date}';
    """
    return q

def getLogNameQuery(name):
    query = f"""
    SELECT access.ID, users.name, users.type, access.check_in, access.check_out
    FROM access LEFT JOIN users ON access.ID = users.ID
    WHERE (LOWER(users.name) LIKE CONCAT('%', "{name}", '%'));
    """
    return query

def addUserQuery(name, id, type, status):
    q = f"""
    INSERT INTO users
    VALUES("{name}", {id}, "{type}", "{status}");
    """
    return q

def updateStatusQuery(id, status):
    query = f"""
    UPDATE users
    SET status="{status}"
    WHERE id = {id};
    """
    return query

def userExistenceQuery(id):
    query = f"""
    SELECT * FROM users
    WHERE ID={id};
    """
    return query
# End of Database
##############################################

# GUI Section with its functions
import tkinter as tk
from tkinter import ttk
from tkinter.messagebox import*

# root window
root = tk.Tk()
root.geometry('500x500')
root.resizable(True, True)
root.title('Admin')

# Table to display list of data
def table(root, list, header):
    for i in range(len(header)):
        t=tk.Entry(root, width=20, fg='black', font=('Arial',16,'bold'))
        t.grid(row=1,column=i)
        t.insert(0,header[i])
        t.config(state="readonly")

    for i in  range(len(list)):
        for j in range(len(list[i])):
            if j<len(list[i])-1:
                t = tk.Entry(root, width=20, fg='blue', font=('Arial',16,'bold'))
            else:
                # if the user's status is active then it prints in green otherwise in red
                if(list[i][j] == "active"):
                    t = tk.Entry(root, width=20, fg='green', font=('Arial',16,'bold'))
                elif(list[i][j] == "suspended"):
                    t = tk.Entry(root, width=20, fg='red', font=('Arial',16,'bold'))
                else:
                    # print in blue for other value
                    t = tk.Entry(root, width=20, fg='blue', font=('Arial',16,'bold'))
            t.grid(row=i+2, column=j)
            if(list[i][j]==None):
                t.insert(0, "NULL")
            else:
                t.insert(0, list[i][j])
            t.config(state="readonly")

# Autogenerated Form for user inputs
def form(root, inputList, varList, function):
    x,y = 40, 60
    for i in range(len(inputList)):
        input_label = tk.Label(
            root,
            text = inputList[i]).place(x = x, y = y) 
        input_area = tk.Entry(
            root,
            textvariable = varList[i]).place(x = x+60, y = y)
        y+=30 
        
    submit_button = ttk.Button(
        root,
        text = "Submit",
        command=function ).place(x = x+60, y = y+10)

# use it to clear form
def clearForm(varList):
    for i in range(len(varList)):
        varList[i].set("")

# use it to create dropdown menu
def dropDown(root, list, var, x, y):
    var.set(list[0])
    drop = ttk.OptionMenu(root, var, *list)
    drop.grid(row=x, column=y)

# use it to diaplay error
def displayError(message):
    showerror(
        title="Error",
        message=message
    )

# Check whether user is in database and user's status is active
def checkUser(id):
    user = read_query(connection, userExistenceQuery(id))
    if len(user)>0: return True
    else: return False

# destory given window
def closeWindow(root):
    root.after(1000, root.destroy)
    
#creating variables
userName = tk.StringVar()
password = tk.StringVar()
fullname = tk.StringVar()
userID = tk.IntVar()
userType = tk.StringVar()
userStatus = tk.StringVar()
sort = tk.StringVar()
searchDate = tk.StringVar()
startTime = tk.StringVar()
endTime = tk.StringVar()

logLabel = ['Full Name', 'ID', 'Type', 'Check In Time', 'Check Out Time']
userLabel = ['Full Name','ID', 'Type', 'Status']

# Functions
# authentcate user
def auth(email, password):
    auth = read_query(connection, checkAdmin(email, password))
    if len(auth) > 0:
        return True
    return False

# submit button
def submit_clicked():
    if auth(userName.get(), password.get()):        
        homeWindow()
        clearForm([userName, password])
    else:
        displayError('Email or Password is incorrect!')
        clearForm([userName, password])

# creates form to authenticate admin
def loginWindow(root):
    form(root, ["Username", "Password"], [userName, password], submit_clicked)

def displayData(root, dataList, label):
    if (dataList == None or len(dataList)==0):
        displayError("Search Not Found In The Database!")
        closeWindow(root)
    else:
        table(root, dataList, label)

# creates new window to display database in the table format
def new_window(windowName, dataList, label):
    window = tk.Toplevel()
    window.title(windowName)
    window.config(width=max, height=max)

    # Sorting
    dropDown(window, ['Select', 'Sort By Name', 'Sort By ID', 'Sort By Date ASC', 'Sort By Date DEC' ], sort, 0,0)

    # dataList = read_query(connection, query)
    def sorting():
        if(sort.get()=='Sort By Name'): 
            displayData(window,sorted(dataList, key=lambda x: x[0]), label)
        elif sort.get()=='Sort By ID':
            displayData(window,sorted(dataList, key=lambda x: x[1]), label)
        elif sort.get()=='Sort By Date ASC':
            displayData(window,sorted(dataList, key=lambda x: x[3], reverse=False), label)
        elif sort.get()=='Sort By Date DEC':
            displayData(window,sorted(dataList, key=lambda x: x[3], reverse=True), label)
    btn = ttk.Button(
        window,
        text='Sort',
        command=sorting
        ).place(x=200,y=0)
    
    # Filtering
    # filtering by date
    x=300
    timeList = ['Time']+[i for i in range(1, 25)]
    # dropdown for start time selection
    dropDown(window, timeList, startTime, x+400, 0)
    # dropdown for end time selection
    dropDown(window, timeList, endTime, x+450, 0)

    dateSearch_label = ttk.Label(
        window,
        text='Date',
    ).place(x=x,y=0)
    dateSearch_input = ttk.Entry(
        window,
        textvariable=searchDate
    ).place(x=x+50, y=0)
    def filtered():
        if(userType.get() != None and userType.get() != "Select"):
            filteredType = filterByType()
            filterByDateAndTime(filteredType)
        else: filterByDateAndTime(dataList)
        
    def filterByDateAndTime(dataList):
        if(searchDate != None and len(searchDate.get())>0):
            newList = searchByDate(dataList)
            if(startTime.get()!='Time' and endTime.get!='Time'): timeRange(f"Logs From Date: {searchDate.get()}",newList)
            else: new_window(f"Logs From Date: {searchDate.get()}", newList, label)
        elif(startTime.get()!='Time' and endTime.get!='Time'): timeRange(windowName,dataList)
        else: new_window(f"{windowName} Filtered By Type: {userType.get()}", dataList, label)

    def searchByDate(dataList):
        filteredList = [sublist for sublist in dataList if str(sublist[3].date())==searchDate.get()]
        return filteredList 
    
    # function for time range filter
    def timeRange(windowName, dataList):
        filteredList = [lst for lst in dataList if int(lst[3].strftime("%H"))>=int(startTime.get()) and int(lst[3].strftime("%H"))<=int(endTime.get())]
        new_window(f'{windowName} (Time: {startTime.get()}-{endTime.get()})', filteredList, label)
    # button for time range filtering
    filter_Btn = ttk.Button(
        window,
        text='Filter',
        command=filtered
    ).place(x=x+300, y=0)

    #Filter by type
    dropDown(window, ['Select', 'student', 'faculty member', 'staff member', 'janitor'], userType, x+500, 0)
    def filterByType():
        filteredList = [sublist for sublist in dataList if sublist[2]==userType.get()]
        if(filteredList != None and len(filteredList)>0):
            #new_window(f"{windowName} Filtered By Type: {userType.get()}", filteredList, label)
            return filteredList
        else: 
            displayError(f"User type: {userType.get()}, does't exist in this table!")
            return None

    displayData(window,dataList, label)
    window.focus()
    window.grab_set()

# Window for add new user
def addUserWindow():
    window = tk.Toplevel()
    window.title("Add User")
    window.config(width=max, height=max)

    def btnFunction():
        if checkUser(userID.get()): displayError(f"User ID: {userID.get()}, exists in the databse!")
        else:
            execute_query(connection, addUserQuery(fullname.get(), userID.get(), userType.get(), "active"))
        clearForm([fullname, userID, userType, userStatus])
        window.destroy()

    form(window, ["Full Name", "ID"], [fullname, userID], btnFunction)
    dropDown(window, ['Select', 'student', 'faculty member', 'staff member', 'janitor'], userType, 40,20)

    window.focus()
    window.grab_set()

# main window for admin
def homeWindow():
    window = tk.Toplevel()
    window.title("Admin Home")
    window.config(width=max, height=max)

    x, y = 10,10

    # add user button
    def addUser():
        addUserWindow()
    add_user_btn = ttk.Button(
        window,
        text="Add User",
        command=addUser
    ).place(x=x, y=y)

    #search bar
    searchID_label = ttk.Label(
        window,
        text="ID"
    ).place(x=x, y=y+30)
    searchName_label = ttk.Label(
        window,
        text="Name"
    ).place(x=x, y=y+60)
    searchID_input = ttk.Entry(
        window,
        textvariable=userID
    ).place(x=x+40, y=y+30)
    searchName_input = ttk.Entry(
        window,
        textvariable=fullname
    ).place(x=x+40, y=y+60)

    y+=30
    #search button
    def searchUser():
        if(userID.get() != None and userID.get()>0):
            if (checkUser(userID.get())):
                new_window(f"Search By ID: {userID.get()}", read_query(connection, getLogByIdQuery(userID.get())), logLabel)
            else: displayError(f"User ID: {userID.get()}, doesn't exist in the databse!")
        elif(fullname.get() != None and len(fullname.get())>0):
            query_result = read_query(connection, getLogNameQuery(fullname.get()))
            if(query_result != None and len(query_result)>0):
                new_window(f"Search By Name: ({fullname.get()})", query_result, logLabel)
            else: displayError(f"User: {fullname.get()}, doesn't exist in the databse!")

    search_btn = ttk.Button(
        window,
        text="Search",
        command=searchUser
    ).place(x=x+100, y=y+100)

    # handle changing users status
    var = tk.IntVar(window,0)
    newX, newY = x, y
    status = {"Suspend":0,
              "Reactive":1}
    for (text, value) in status.items():
        tk.Radiobutton(window, text=text, variable=var,
                       value=value, indicatoron=1,
                       background="light blue").place(x=newX, y=newY+60)
        newX+=80
    
    def changeStatus():
        if checkUser(userID.get()):
            if(var.get()==0):
                status="suspended"
            else:
                status="active"
            execute_query(connection, updateStatusQuery(userID.get(), status))
            showinfo(
                title="Status Change",
                message=f'{userID.get()} is reactivated!'   
            )
        else: displayError(f"User ID: {userID.get()}, doesn't exist in the databse!")
    change_status_btn = ttk.Button(
        window,
        text="Update",
        command=changeStatus
    ).place(x=x, y=y+100)

    # display log history
    def logBtn():
        new_window("Access Log", read_query(connection, getLogQuery()), logLabel)
    logs_view_btn = ttk.Button(
        window,
        text="Logs",
        command=logBtn
    ).place(x=x+100, y=y+140)
    
    # display users in the databse
    def userBtn():
        new_window("Users Table", read_query(connection, getDatabaseQuery("users")), userLabel)
    users_view_btn = ttk.Button(
        window,
        text="Users",
        command=userBtn
    ).place(x=x, y=y+140)

    window.focus()
    window.grab_set()

# start the login window
loginWindow(root)
root.mainloop()